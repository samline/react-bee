{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/sam/Documents/sites/react-bee/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\nvar _slicedToArray = require(\"/Users/sam/Documents/sites/react-bee/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.matchHas = matchHas;\nexports.compileNonPath = compileNonPath;\nexports.prepareDestination = prepareDestination;\nvar _extends = require(\"@swc/helpers/lib/_extends.js\").default;\nvar _pathToRegexp = require(\"next/dist/compiled/path-to-regexp\");\nvar _escapeRegexp = require(\"../../escape-regexp\");\nvar _parseUrl = require(\"./parse-url\");\n/**\n * Ensure only a-zA-Z are used for param names for proper interpolating\n * with path-to-regexp\n */\nfunction getSafeParamName(paramName) {\n  var newParamName = '';\n  for (var i = 0; i < paramName.length; i++) {\n    var charCode = paramName.charCodeAt(i);\n    if (charCode > 64 && charCode < 91 || charCode > 96 && charCode < 123 // a-z\n    ) {\n      newParamName += paramName[i];\n    }\n  }\n  return newParamName;\n}\nfunction escapeSegment(str, segmentName) {\n  return str.replace(new RegExp(\":\".concat((0, _escapeRegexp).escapeStringRegexp(segmentName)), 'g'), \"__ESC_COLON_\".concat(segmentName));\n}\nfunction unescapeSegments(str) {\n  return str.replace(/__ESC_COLON_/gi, ':');\n}\nfunction matchHas(req, has, query) {\n  var params = {};\n  var allMatch = has.every(function (hasItem) {\n    var value;\n    var key = hasItem.key;\n    switch (hasItem.type) {\n      case 'header':\n        {\n          key = key.toLowerCase();\n          value = req.headers[key];\n          break;\n        }\n      case 'cookie':\n        {\n          value = req.cookies[hasItem.key];\n          break;\n        }\n      case 'query':\n        {\n          value = query[key];\n          break;\n        }\n      case 'host':\n        {\n          var _ref = (req == null ? void 0 : req.headers) || {},\n            host = _ref.host;\n          // remove port from host if present\n          var hostname = host == null ? void 0 : host.split(':')[0].toLowerCase();\n          value = hostname;\n          break;\n        }\n      default:\n        {\n          break;\n        }\n    }\n    if (!hasItem.value && value) {\n      params[getSafeParamName(key)] = value;\n      return true;\n    } else if (value) {\n      var matcher = new RegExp(\"^\".concat(hasItem.value, \"$\"));\n      var matches = Array.isArray(value) ? value.slice(-1)[0].match(matcher) : value.match(matcher);\n      if (matches) {\n        if (Array.isArray(matches)) {\n          if (matches.groups) {\n            Object.keys(matches.groups).forEach(function (groupKey) {\n              params[groupKey] = matches.groups[groupKey];\n            });\n          } else if (hasItem.type === 'host' && matches[0]) {\n            params.host = matches[0];\n          }\n        }\n        return true;\n      }\n    }\n    return false;\n  });\n  if (allMatch) {\n    return params;\n  }\n  return false;\n}\nfunction compileNonPath(value, params) {\n  if (!value.includes(':')) {\n    return value;\n  }\n  for (var _i = 0, _Object$keys = Object.keys(params); _i < _Object$keys.length; _i++) {\n    var key = _Object$keys[_i];\n    if (value.includes(\":\".concat(key))) {\n      value = value.replace(new RegExp(\":\".concat(key, \"\\\\*\"), 'g'), \":\".concat(key, \"--ESCAPED_PARAM_ASTERISKS\")).replace(new RegExp(\":\".concat(key, \"\\\\?\"), 'g'), \":\".concat(key, \"--ESCAPED_PARAM_QUESTION\")).replace(new RegExp(\":\".concat(key, \"\\\\+\"), 'g'), \":\".concat(key, \"--ESCAPED_PARAM_PLUS\")).replace(new RegExp(\":\".concat(key, \"(?!\\\\w)\"), 'g'), \"--ESCAPED_PARAM_COLON\".concat(key));\n    }\n  }\n  value = value.replace(/(:|\\*|\\?|\\+|\\(|\\)|\\{|\\})/g, '\\\\$1').replace(/--ESCAPED_PARAM_PLUS/g, '+').replace(/--ESCAPED_PARAM_COLON/g, ':').replace(/--ESCAPED_PARAM_QUESTION/g, '?').replace(/--ESCAPED_PARAM_ASTERISKS/g, '*');\n  // the value needs to start with a forward-slash to be compiled\n  // correctly\n  return (0, _pathToRegexp).compile(\"/\".concat(value), {\n    validate: false\n  })(params).slice(1);\n}\nfunction prepareDestination(args) {\n  var query = Object.assign({}, args.query);\n  delete query.__nextLocale;\n  delete query.__nextDefaultLocale;\n  delete query.__nextDataReq;\n  var escapedDestination = args.destination;\n  for (var _i2 = 0, _Object$keys2 = Object.keys(_extends({}, args.params, query)); _i2 < _Object$keys2.length; _i2++) {\n    var param = _Object$keys2[_i2];\n    escapedDestination = escapeSegment(escapedDestination, param);\n  }\n  var parsedDestination = (0, _parseUrl).parseUrl(escapedDestination);\n  var destQuery = parsedDestination.query;\n  var destPath = unescapeSegments(\"\".concat(parsedDestination.pathname).concat(parsedDestination.hash || ''));\n  var destHostname = unescapeSegments(parsedDestination.hostname || '');\n  var destPathParamKeys = [];\n  var destHostnameParamKeys = [];\n  (0, _pathToRegexp).pathToRegexp(destPath, destPathParamKeys);\n  (0, _pathToRegexp).pathToRegexp(destHostname, destHostnameParamKeys);\n  var destParams = [];\n  destPathParamKeys.forEach(function (key) {\n    return destParams.push(key.name);\n  });\n  destHostnameParamKeys.forEach(function (key) {\n    return destParams.push(key.name);\n  });\n  var destPathCompiler = (0, _pathToRegexp).compile(destPath,\n  // we don't validate while compiling the destination since we should\n  // have already validated before we got to this point and validating\n  // breaks compiling destinations with named pattern params from the source\n  // e.g. /something:hello(.*) -> /another/:hello is broken with validation\n  // since compile validation is meant for reversing and not for inserting\n  // params from a separate path-regex into another\n  {\n    validate: false\n  });\n  var destHostnameCompiler = (0, _pathToRegexp).compile(destHostname, {\n    validate: false\n  });\n  // update any params in query values\n  for (var _i3 = 0, _Object$entries = Object.entries(destQuery); _i3 < _Object$entries.length; _i3++) {\n    var _Object$entries$_i = _slicedToArray(_Object$entries[_i3], 2),\n      key1 = _Object$entries$_i[0],\n      strOrArray = _Object$entries$_i[1];\n    // the value needs to start with a forward-slash to be compiled\n    // correctly\n    if (Array.isArray(strOrArray)) {\n      destQuery[key1] = strOrArray.map(function (value) {\n        return compileNonPath(unescapeSegments(value), args.params);\n      });\n    } else {\n      destQuery[key1] = compileNonPath(unescapeSegments(strOrArray), args.params);\n    }\n  }\n  // add path params to query if it's not a redirect and not\n  // already defined in destination query or path\n  var paramKeys = Object.keys(args.params).filter(function (name) {\n    return name !== 'nextInternalLocale';\n  });\n  if (args.appendParamsToQuery && !paramKeys.some(function (key) {\n    return destParams.includes(key);\n  })) {\n    var _iterator = _createForOfIteratorHelper(paramKeys),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var key = _step.value;\n        if (!(key in destQuery)) {\n          destQuery[key] = args.params[key];\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n  var newUrl;\n  try {\n    newUrl = destPathCompiler(args.params);\n    var _newUrl$split = newUrl.split('#'),\n      _newUrl$split2 = _slicedToArray(_newUrl$split, 2),\n      pathname = _newUrl$split2[0],\n      hash = _newUrl$split2[1];\n    parsedDestination.hostname = destHostnameCompiler(args.params);\n    parsedDestination.pathname = pathname;\n    parsedDestination.hash = \"\".concat(hash ? '#' : '').concat(hash || '');\n    delete parsedDestination.search;\n  } catch (err) {\n    if (err.message.match(/Expected .*? to not repeat, but got an array/)) {\n      throw new Error(\"To use a multi-match in the destination you must add `*` at the end of the param name to signify it should repeat. https://nextjs.org/docs/messages/invalid-multi-match\");\n    }\n    throw err;\n  }\n  // Query merge order lowest priority to highest\n  // 1. initial URL query values\n  // 2. path segment values\n  // 3. destination specified query values\n  parsedDestination.query = _extends({}, query, parsedDestination.query);\n  return {\n    newUrl: newUrl,\n    destQuery: destQuery,\n    parsedDestination: parsedDestination\n  };\n}","map":{"version":3,"sources":["../../../../../shared/lib/router/utils/prepare-destination.ts"],"names":["getSafeParamName","paramName","newParamName","i","length","charCode","charCodeAt","escapeSegment","str","segmentName","replace","RegExp","escapeStringRegexp","unescapeSegments","matchHas","req","has","query","params","allMatch","every","hasItem","value","key","type","toLowerCase","headers","cookies","host","hostname","split","matcher","matches","Array","isArray","slice","match","groups","Object","keys","forEach","groupKey","compileNonPath","includes","compile","validate","prepareDestination","args","assign","__nextLocale","__nextDefaultLocale","__nextDataReq","escapedDestination","destination","param","parsedDestination","parseUrl","destQuery","destPath","pathname","hash","destHostname","destPathParamKeys","destHostnameParamKeys","pathToRegexp","destParams","push","name","destPathCompiler","destHostnameCompiler","strOrArray","entries","map","paramKeys","filter","appendParamsToQuery","some","newUrl","search","err","message","Error"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.matchHas = matchHas;\nexports.compileNonPath = compileNonPath;\nexports.prepareDestination = prepareDestination;\nvar _extends = require(\"@swc/helpers/lib/_extends.js\").default;\nvar _pathToRegexp = require(\"next/dist/compiled/path-to-regexp\");\nvar _escapeRegexp = require(\"../../escape-regexp\");\nvar _parseUrl = require(\"./parse-url\");\n/**\n * Ensure only a-zA-Z are used for param names for proper interpolating\n * with path-to-regexp\n */ function getSafeParamName(paramName) {\n    let newParamName = '';\n    for(let i = 0; i < paramName.length; i++){\n        const charCode = paramName.charCodeAt(i);\n        if (charCode > 64 && charCode < 91 || charCode > 96 && charCode < 123 // a-z\n        ) {\n            newParamName += paramName[i];\n        }\n    }\n    return newParamName;\n}\nfunction escapeSegment(str, segmentName) {\n    return str.replace(new RegExp(`:${(0, _escapeRegexp).escapeStringRegexp(segmentName)}`, 'g'), `__ESC_COLON_${segmentName}`);\n}\nfunction unescapeSegments(str) {\n    return str.replace(/__ESC_COLON_/gi, ':');\n}\nfunction matchHas(req, has, query) {\n    const params = {};\n    const allMatch = has.every((hasItem)=>{\n        let value;\n        let key = hasItem.key;\n        switch(hasItem.type){\n            case 'header':\n                {\n                    key = key.toLowerCase();\n                    value = req.headers[key];\n                    break;\n                }\n            case 'cookie':\n                {\n                    value = req.cookies[hasItem.key];\n                    break;\n                }\n            case 'query':\n                {\n                    value = query[key];\n                    break;\n                }\n            case 'host':\n                {\n                    const { host  } = (req == null ? void 0 : req.headers) || {};\n                    // remove port from host if present\n                    const hostname = host == null ? void 0 : host.split(':')[0].toLowerCase();\n                    value = hostname;\n                    break;\n                }\n            default:\n                {\n                    break;\n                }\n        }\n        if (!hasItem.value && value) {\n            params[getSafeParamName(key)] = value;\n            return true;\n        } else if (value) {\n            const matcher = new RegExp(`^${hasItem.value}$`);\n            const matches = Array.isArray(value) ? value.slice(-1)[0].match(matcher) : value.match(matcher);\n            if (matches) {\n                if (Array.isArray(matches)) {\n                    if (matches.groups) {\n                        Object.keys(matches.groups).forEach((groupKey)=>{\n                            params[groupKey] = matches.groups[groupKey];\n                        });\n                    } else if (hasItem.type === 'host' && matches[0]) {\n                        params.host = matches[0];\n                    }\n                }\n                return true;\n            }\n        }\n        return false;\n    });\n    if (allMatch) {\n        return params;\n    }\n    return false;\n}\nfunction compileNonPath(value, params) {\n    if (!value.includes(':')) {\n        return value;\n    }\n    for (const key of Object.keys(params)){\n        if (value.includes(`:${key}`)) {\n            value = value.replace(new RegExp(`:${key}\\\\*`, 'g'), `:${key}--ESCAPED_PARAM_ASTERISKS`).replace(new RegExp(`:${key}\\\\?`, 'g'), `:${key}--ESCAPED_PARAM_QUESTION`).replace(new RegExp(`:${key}\\\\+`, 'g'), `:${key}--ESCAPED_PARAM_PLUS`).replace(new RegExp(`:${key}(?!\\\\w)`, 'g'), `--ESCAPED_PARAM_COLON${key}`);\n        }\n    }\n    value = value.replace(/(:|\\*|\\?|\\+|\\(|\\)|\\{|\\})/g, '\\\\$1').replace(/--ESCAPED_PARAM_PLUS/g, '+').replace(/--ESCAPED_PARAM_COLON/g, ':').replace(/--ESCAPED_PARAM_QUESTION/g, '?').replace(/--ESCAPED_PARAM_ASTERISKS/g, '*');\n    // the value needs to start with a forward-slash to be compiled\n    // correctly\n    return (0, _pathToRegexp).compile(`/${value}`, {\n        validate: false\n    })(params).slice(1);\n}\nfunction prepareDestination(args) {\n    const query = Object.assign({}, args.query);\n    delete query.__nextLocale;\n    delete query.__nextDefaultLocale;\n    delete query.__nextDataReq;\n    let escapedDestination = args.destination;\n    for (const param of Object.keys(_extends({}, args.params, query))){\n        escapedDestination = escapeSegment(escapedDestination, param);\n    }\n    const parsedDestination = (0, _parseUrl).parseUrl(escapedDestination);\n    const destQuery = parsedDestination.query;\n    const destPath = unescapeSegments(`${parsedDestination.pathname}${parsedDestination.hash || ''}`);\n    const destHostname = unescapeSegments(parsedDestination.hostname || '');\n    const destPathParamKeys = [];\n    const destHostnameParamKeys = [];\n    (0, _pathToRegexp).pathToRegexp(destPath, destPathParamKeys);\n    (0, _pathToRegexp).pathToRegexp(destHostname, destHostnameParamKeys);\n    const destParams = [];\n    destPathParamKeys.forEach((key)=>destParams.push(key.name));\n    destHostnameParamKeys.forEach((key)=>destParams.push(key.name));\n    const destPathCompiler = (0, _pathToRegexp).compile(destPath, // we don't validate while compiling the destination since we should\n    // have already validated before we got to this point and validating\n    // breaks compiling destinations with named pattern params from the source\n    // e.g. /something:hello(.*) -> /another/:hello is broken with validation\n    // since compile validation is meant for reversing and not for inserting\n    // params from a separate path-regex into another\n    {\n        validate: false\n    });\n    const destHostnameCompiler = (0, _pathToRegexp).compile(destHostname, {\n        validate: false\n    });\n    // update any params in query values\n    for (const [key1, strOrArray] of Object.entries(destQuery)){\n        // the value needs to start with a forward-slash to be compiled\n        // correctly\n        if (Array.isArray(strOrArray)) {\n            destQuery[key1] = strOrArray.map((value)=>compileNonPath(unescapeSegments(value), args.params));\n        } else {\n            destQuery[key1] = compileNonPath(unescapeSegments(strOrArray), args.params);\n        }\n    }\n    // add path params to query if it's not a redirect and not\n    // already defined in destination query or path\n    let paramKeys = Object.keys(args.params).filter((name)=>name !== 'nextInternalLocale');\n    if (args.appendParamsToQuery && !paramKeys.some((key)=>destParams.includes(key))) {\n        for (const key of paramKeys){\n            if (!(key in destQuery)) {\n                destQuery[key] = args.params[key];\n            }\n        }\n    }\n    let newUrl;\n    try {\n        newUrl = destPathCompiler(args.params);\n        const [pathname, hash] = newUrl.split('#');\n        parsedDestination.hostname = destHostnameCompiler(args.params);\n        parsedDestination.pathname = pathname;\n        parsedDestination.hash = `${hash ? '#' : ''}${hash || ''}`;\n        delete parsedDestination.search;\n    } catch (err) {\n        if (err.message.match(/Expected .*? to not repeat, but got an array/)) {\n            throw new Error(`To use a multi-match in the destination you must add \\`*\\` at the end of the param name to signify it should repeat. https://nextjs.org/docs/messages/invalid-multi-match`);\n        }\n        throw err;\n    }\n    // Query merge order lowest priority to highest\n    // 1. initial URL query values\n    // 2. path segment values\n    // 3. destination specified query values\n    parsedDestination.query = _extends({}, query, parsedDestination.query);\n    return {\n        newUrl,\n        destQuery,\n        parsedDestination\n    };\n}\n\n//# sourceMappingURL=prepare-destination.js.map"]},"metadata":{},"sourceType":"script"}