{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseUrl = parseUrl;\nvar _querystring = require(\"./querystring\");\nvar _parseRelativeUrl = require(\"./parse-relative-url\");\nfunction parseUrl(url) {\n  if (url.startsWith('/')) {\n    return (0, _parseRelativeUrl).parseRelativeUrl(url);\n  }\n  var parsedURL = new URL(url);\n  return {\n    hash: parsedURL.hash,\n    hostname: parsedURL.hostname,\n    href: parsedURL.href,\n    pathname: parsedURL.pathname,\n    port: parsedURL.port,\n    protocol: parsedURL.protocol,\n    query: (0, _querystring).searchParamsToUrlQuery(parsedURL.searchParams),\n    search: parsedURL.search\n  };\n}","map":{"version":3,"sources":["../../../../../shared/lib/router/utils/parse-url.ts"],"names":["parseUrl","url","startsWith","parseRelativeUrl","parsedURL","URL","hash","hostname","href","pathname","port","protocol","query","searchParamsToUrlQuery","searchParams","search"],"mappings":"AAAA,YAAA;;;;;QAgBgBA,QAAQ,GAARA,QAAQ;AAde,IAAA,YAAe,GAAA,OAAA,CAAf,eAAe,CAAA;AACrB,IAAA,iBAAsB,GAAA,OAAA,CAAtB,sBAAsB,CAAA;AAahD,SAASA,QAAQ,CAACC,GAAW,EAAa;EAC/C,IAAIA,GAAG,CAACC,UAAU,CAAC,GAAG,CAAC,EAAE;IACvB,OAAOC,CAAAA,CAAAA,EAAAA,iBAAqB,EAAA,gBAAL,CAACF,GAAG,CAAC;EAC7B;EAED,IAAMG,SAAS,GAAG,IAAIC,GAAG,CAACJ,GAAG,CAAC;EAC9B,OAAO;IACLK,IAAI,EAAEF,SAAS,CAACE,IAAI;IACpBC,QAAQ,EAAEH,SAAS,CAACG,QAAQ;IAC5BC,IAAI,EAAEJ,SAAS,CAACI,IAAI;IACpBC,QAAQ,EAAEL,SAAS,CAACK,QAAQ;IAC5BC,IAAI,EAAEN,SAAS,CAACM,IAAI;IACpBC,QAAQ,EAAEP,SAAS,CAACO,QAAQ;IAC5BC,KAAK,EAAEC,CAAAA,CAAAA,EAAAA,YAA8C,EAAA,sBAAxB,CAACT,SAAS,CAACU,YAAY,CAAC;IACrDC,MAAM,EAAEX,SAAS,CAACW;GACnB;AACF","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.parseUrl = parseUrl;\nvar _querystring = require(\"./querystring\");\nvar _parseRelativeUrl = require(\"./parse-relative-url\");\nfunction parseUrl(url) {\n    if (url.startsWith('/')) {\n        return (0, _parseRelativeUrl).parseRelativeUrl(url);\n    }\n    const parsedURL = new URL(url);\n    return {\n        hash: parsedURL.hash,\n        hostname: parsedURL.hostname,\n        href: parsedURL.href,\n        pathname: parsedURL.pathname,\n        port: parsedURL.port,\n        protocol: parsedURL.protocol,\n        query: (0, _querystring).searchParamsToUrlQuery(parsedURL.searchParams),\n        search: parsedURL.search\n    };\n}\n\n//# sourceMappingURL=parse-url.js.map"]},"metadata":{},"sourceType":"script"}