{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = mitt;\nfunction mitt() {\n  var all = Object.create(null);\n  return {\n    on: function on(type, handler) {\n      (all[type] || (all[type] = [])).push(handler);\n    },\n    off: function off(type, handler) {\n      if (all[type]) {\n        all[type].splice(all[type].indexOf(handler) >>> 0, 1);\n      }\n    },\n    emit: function emit(type) {\n      for (var _len = arguments.length, evts = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        evts[_key - 1] = arguments[_key];\n      }\n      (all[type] || []).slice().map(function (handler) {\n        handler.apply(void 0, evts);\n      });\n    }\n  };\n}","map":{"version":3,"sources":["../../../shared/lib/mitt.ts"],"names":["mitt","all","Object","create","on","type","handler","push","off","splice","indexOf","emit","evts","slice","map"],"mappings":"AAgBA,YAAA;;;;;kBAQwBA,IAAI;AAAb,SAASA,IAAI,GAAwB;EAClD,IAAMC,GAAG,GAA+BC,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;EAE3D,OAAO;IACLC,EAAE,cAACC,IAAY,EAAEC,OAAgB,EAAE;MAChC,CAACL,GAAG,CAACI,IAAI,CAAC,KAAKJ,GAAG,CAACI,IAAI,CAAC,GAAG,EAAE,CAAC,EAAEE,IAAI,CAACD,OAAO,CAAC;KAC/C;IAEDE,GAAG,eAACH,IAAY,EAAEC,OAAgB,EAAE;MAClC,IAAIL,GAAG,CAACI,IAAI,CAAC,EAAE;QACbJ,GAAG,CAACI,IAAI,CAAC,CAACI,MAAM,CAACR,GAAG,CAACI,IAAI,CAAC,CAACK,OAAO,CAACJ,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;MACtD;KACF;IAEDK,IAAI,gBAACN,IAAY,EAAkB;MAAA,kCAAbO,IAAW;QAAXA,IAAW;MAAA;MAE9B,CAACX,GAAG,CAACI,IAAI,CAAC,IAAI,EAAE,EAAEQ,KAAK,EAAE,CAACC,GAAG,CAAC,UAACR,OAAgB,EAAK;QACnDA,OAAO,eAAIM,IAAI,CAAC;OACjB,CAAC;IACH;GACF;AACF","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = mitt;\nfunction mitt() {\n    const all = Object.create(null);\n    return {\n        on (type, handler) {\n            (all[type] || (all[type] = [])).push(handler);\n        },\n        off (type, handler) {\n            if (all[type]) {\n                all[type].splice(all[type].indexOf(handler) >>> 0, 1);\n            }\n        },\n        emit (type, ...evts) {\n            (all[type] || []).slice().map((handler)=>{\n                handler(...evts);\n            });\n        }\n    };\n}\n\n//# sourceMappingURL=mitt.js.map"]},"metadata":{},"sourceType":"script"}