{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = mitt;\n\nfunction mitt() {\n  var all = Object.create(null);\n  return {\n    on: function on(type, handler) {\n      (all[type] || (all[type] = [])).push(handler);\n    },\n    off: function off(type, handler) {\n      if (all[type]) {\n        all[type].splice(all[type].indexOf(handler) >>> 0, 1);\n      }\n    },\n    emit: function emit(type) {\n      for (var _len = arguments.length, evts = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        evts[_key - 1] = arguments[_key];\n      }\n\n      (all[type] || []).slice().map(function (handler) {\n        handler.apply(void 0, evts);\n      });\n    }\n  };\n}","map":{"version":3,"sources":["../../../shared/lib/mitt.ts"],"names":["mitt","all","Object","create","on","type","handler","push","off","splice","indexOf","emit","evts","slice","map"],"mappings":"AAgBA;;;;;kBAQwBA,I;;AAAT,SAASA,IAAT,GAAqC;EAClD,IAAMC,GAAG,GAA+BC,MAAM,CAACC,MAAPD,CAAc,IAAdA,CAAxC;EAEA,OAAO;IACLE,EADK,cACFC,IADE,EACYC,OADZ,EAC8B;MAChC,CAACL,GAAG,CAACI,IAAD,CAAHJ,KAAcA,GAAG,CAACI,IAAD,CAAHJ,GAAY,EAA1BA,CAAD,EAAgCM,IAAhC,CAAqCD,OAArC;IACF,CAHI;IAKLE,GALK,eAKDH,IALC,EAKaC,OALb,EAK+B;MAClC,IAAIL,GAAG,CAACI,IAAD,CAAP,EAAe;QACbJ,GAAG,CAACI,IAAD,CAAHJ,CAAUQ,MAAVR,CAAiBA,GAAG,CAACI,IAAD,CAAHJ,CAAUS,OAAVT,CAAkBK,OAAlBL,MAA+B,CAAhDA,EAAmD,CAAnDA;MACD;IACF,CATI;IAWLU,IAXK,gBAWAN,IAXA,EAW8B;MAAA,kCAAbO,IAAa;QAAbA,IAAa;MAAA;;MAEhC,CAACX,GAAG,CAACI,IAAD,CAAHJ,IAAa,EAAd,EAAkBY,KAAlB,GAA0BC,GAA1B,CAA8B,UAACR,OAAD,EAAsB;QACnDA,OAAO,MAAPA,SAAWM,IAAXN;MACD,CAFA;IAGF;EAhBI,CAAP;AAkBD","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = mitt;\nfunction mitt() {\n    const all = Object.create(null);\n    return {\n        on (type, handler) {\n            (all[type] || (all[type] = [])).push(handler);\n        },\n        off (type, handler) {\n            if (all[type]) {\n                all[type].splice(all[type].indexOf(handler) >>> 0, 1);\n            }\n        },\n        emit (type, ...evts) {\n            (all[type] || []).slice().map((handler)=>{\n                handler(...evts);\n            });\n        }\n    };\n}\n\n//# sourceMappingURL=mitt.js.map"]},"metadata":{},"sourceType":"script"}