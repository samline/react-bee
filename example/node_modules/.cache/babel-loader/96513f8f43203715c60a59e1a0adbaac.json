{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/sam/Documents/sites/react-bee/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getPathMatch = getPathMatch;\n\nvar _extends = require(\"@swc/helpers/lib/_extends.js\").default;\n\nvar _pathToRegexp = require(\"next/dist/compiled/path-to-regexp\");\n\nfunction getPathMatch(path, options) {\n  var keys = [];\n  var regexp = (0, _pathToRegexp).pathToRegexp(path, keys, {\n    delimiter: '/',\n    sensitive: false,\n    strict: options == null ? void 0 : options.strict\n  });\n  var matcher = (0, _pathToRegexp).regexpToFunction((options == null ? void 0 : options.regexModifier) ? new RegExp(options.regexModifier(regexp.source), regexp.flags) : regexp, keys);\n  /**\n  * A matcher function that will check if a given pathname matches the path\n  * given in the builder function. When the path does not match it will return\n  * `false` but if it does it will return an object with the matched params\n  * merged with the params provided in the second argument.\n  */\n\n  return function (pathname, params) {\n    var res = pathname == null ? false : matcher(pathname);\n\n    if (!res) {\n      return false;\n    }\n    /**\n    * If unnamed params are not allowed they must be removed from\n    * the matched parameters. path-to-regexp uses \"string\" for named and\n    * \"number\" for unnamed parameters.\n    */\n\n\n    if (options == null ? void 0 : options.removeUnnamedParams) {\n      var _iterator = _createForOfIteratorHelper(keys),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var key = _step.value;\n\n          if (typeof key.name === 'number') {\n            delete res.params[key.name];\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n\n    return _extends({}, params, res.params);\n  };\n}","map":{"version":3,"sources":["../../../../../shared/lib/router/utils/path-match.ts"],"names":["getPathMatch","path","options","keys","regexp","pathToRegexp","delimiter","sensitive","strict","matcher","regexpToFunction","regexModifier","RegExp","source","flags","pathname","params","res","removeUnnamedParams","key","name"],"mappings":"AAAA;;;;;;;QA2BgBA,Y,GAAAA,Y;;;;AA1Ba,IAAA,aAAmC,GAAA,OAAA,CAAnC,mCAAmC,CAAnC;;AA0BtB,SAASA,YAAT,CAAsBC,IAAtB,EAAoCC,OAApC,EAAuD;EAC5D,IAAMC,IAAI,GAAU,EAApB;EACA,IAAMC,MAAM,GAAGC,CAAAA,GAAAA,aAAAA,EAAY,YAAZA,CAAaJ,IAAbI,EAAmBF,IAAnBE,EAAyB;IACtCC,SAAS,EAAE,GAD2B;IAEtCC,SAAS,EAAE,KAF2B;IAGtCC,MAAM,EAAEN,OAAO,IAAA,IAAPA,GAAAA,KAAAA,CAAAA,GAAAA,OAAO,CAAEM;EAHqB,CAAzBH,CAAf;EAMA,IAAMI,OAAO,GAAGC,CAAAA,GAAAA,aAAAA,EAAgB,gBAAhBA,CACdR,CAAAA,OAAO,IAAA,IAAPA,GAAAA,KAAAA,CAAAA,GAAAA,OAAO,CAAES,aAATT,IACI,IAAIU,MAAJ,CAAWV,OAAO,CAACS,aAART,CAAsBE,MAAM,CAACS,MAA7BX,CAAX,EAAiDE,MAAM,CAACU,KAAxD,CADJZ,GAEIE,MAHUM,EAIdP,IAJcO,CAAhB;EAOA;;;;;AAKG;;EACH,OAAO,UACLK,QADK,EAELC,MAFK,EAGS;IACd,IAAMC,GAAG,GAAGF,QAAQ,IAAI,IAAZA,GAAmB,KAAnBA,GAA2BN,OAAO,CAACM,QAAD,CAA9C;;IACA,IAAI,CAACE,GAAL,EAAU;MACR,OAAO,KAAP;IACD;IAED;;;;AAIG;;;IACH,IAAIf,OAAO,IAAA,IAAPA,GAAAA,KAAAA,CAAAA,GAAAA,OAAO,CAAEgB,mBAAb,EAAkC;MAAA,2CACdf,IADc;MAAA;;MAAA;QAChC,oDAAwB;UAAA,IAAbgB,GAAa;;UACtB,IAAI,OAAOA,GAAG,CAACC,IAAX,KAAoB,QAAxB,EAAkC;YAChC,OAAQH,GAAG,CAACD,MAAJC,CAAmBE,GAAG,CAACC,IAAvBH,CAAR;UACD;QACF;MAL+B;QAAA;MAAA;QAAA;MAAA;IAMjC;;IAED,OAAO,QAAA,CAAA,EAAA,EAAKD,MAAL,EAAgBC,GAAG,CAACD,MAApB,CAAP;EACD,CAvBD;AAwBD","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.getPathMatch = getPathMatch;\nvar _extends = require(\"@swc/helpers/lib/_extends.js\").default;\nvar _pathToRegexp = require(\"next/dist/compiled/path-to-regexp\");\nfunction getPathMatch(path, options) {\n    const keys = [];\n    const regexp = (0, _pathToRegexp).pathToRegexp(path, keys, {\n        delimiter: '/',\n        sensitive: false,\n        strict: options == null ? void 0 : options.strict\n    });\n    const matcher = (0, _pathToRegexp).regexpToFunction((options == null ? void 0 : options.regexModifier) ? new RegExp(options.regexModifier(regexp.source), regexp.flags) : regexp, keys);\n    /**\n   * A matcher function that will check if a given pathname matches the path\n   * given in the builder function. When the path does not match it will return\n   * `false` but if it does it will return an object with the matched params\n   * merged with the params provided in the second argument.\n   */ return (pathname, params)=>{\n        const res = pathname == null ? false : matcher(pathname);\n        if (!res) {\n            return false;\n        }\n        /**\n     * If unnamed params are not allowed they must be removed from\n     * the matched parameters. path-to-regexp uses \"string\" for named and\n     * \"number\" for unnamed parameters.\n     */ if (options == null ? void 0 : options.removeUnnamedParams) {\n            for (const key of keys){\n                if (typeof key.name === 'number') {\n                    delete res.params[key.name];\n                }\n            }\n        }\n        return _extends({}, params, res.params);\n    };\n}\n\n//# sourceMappingURL=path-match.js.map"]},"metadata":{},"sourceType":"script"}