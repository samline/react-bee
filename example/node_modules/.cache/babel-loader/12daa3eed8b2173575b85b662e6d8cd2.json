{"ast":null,"code":"\"use strict\";\n\nvar _toArray = require(\"/Users/sam/Documents/sites/react-bee/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toArray\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = resolveRewrites;\nvar _pathMatch = require(\"./path-match\");\nvar _prepareDestination = require(\"./prepare-destination\");\nvar _removeTrailingSlash = require(\"./remove-trailing-slash\");\nvar _normalizeLocalePath = require(\"../../i18n/normalize-locale-path\");\nvar _removeBasePath = require(\"../../../../client/remove-base-path\");\nvar _parseRelativeUrl = require(\"./parse-relative-url\");\nfunction resolveRewrites(asPath, pages, rewrites, query, resolveHref, locales) {\n  var matchedPage = false;\n  var externalDest = false;\n  var parsedAs = (0, _parseRelativeUrl).parseRelativeUrl(asPath);\n  var fsPathname = (0, _removeTrailingSlash).removeTrailingSlash((0, _normalizeLocalePath).normalizeLocalePath((0, _removeBasePath).removeBasePath(parsedAs.pathname), locales).pathname);\n  var resolvedHref;\n  var handleRewrite = function handleRewrite(rewrite) {\n    var matcher = (0, _pathMatch).getPathMatch(rewrite.source + (process.env.__NEXT_TRAILING_SLASH ? '(/)?' : ''), {\n      removeUnnamedParams: true,\n      strict: true\n    });\n    var params = matcher(parsedAs.pathname);\n    if (rewrite.has && params) {\n      var hasParams = (0, _prepareDestination).matchHas({\n        headers: {\n          host: document.location.hostname\n        },\n        cookies: document.cookie.split('; ').reduce(function (acc, item) {\n          var _item$split = item.split('='),\n            _item$split2 = _toArray(_item$split),\n            key = _item$split2[0],\n            value = _item$split2.slice(1);\n          acc[key] = value.join('=');\n          return acc;\n        }, {})\n      }, rewrite.has, parsedAs.query);\n      if (hasParams) {\n        Object.assign(params, hasParams);\n      } else {\n        params = false;\n      }\n    }\n    if (params) {\n      if (!rewrite.destination) {\n        // this is a proxied rewrite which isn't handled on the client\n        externalDest = true;\n        return true;\n      }\n      var destRes = (0, _prepareDestination).prepareDestination({\n        appendParamsToQuery: true,\n        destination: rewrite.destination,\n        params: params,\n        query: query\n      });\n      parsedAs = destRes.parsedDestination;\n      asPath = destRes.newUrl;\n      Object.assign(query, destRes.parsedDestination.query);\n      fsPathname = (0, _removeTrailingSlash).removeTrailingSlash((0, _normalizeLocalePath).normalizeLocalePath((0, _removeBasePath).removeBasePath(asPath), locales).pathname);\n      if (pages.includes(fsPathname)) {\n        // check if we now match a page as this means we are done\n        // resolving the rewrites\n        matchedPage = true;\n        resolvedHref = fsPathname;\n        return true;\n      }\n      // check if we match a dynamic-route, if so we break the rewrites chain\n      resolvedHref = resolveHref(fsPathname);\n      if (resolvedHref !== asPath && pages.includes(resolvedHref)) {\n        matchedPage = true;\n        return true;\n      }\n    }\n  };\n  var finished = false;\n  for (var i = 0; i < rewrites.beforeFiles.length; i++) {\n    // we don't end after match in beforeFiles to allow\n    // continuing through all beforeFiles rewrites\n    handleRewrite(rewrites.beforeFiles[i]);\n  }\n  matchedPage = pages.includes(fsPathname);\n  if (!matchedPage) {\n    if (!finished) {\n      for (var _i = 0; _i < rewrites.afterFiles.length; _i++) {\n        if (handleRewrite(rewrites.afterFiles[_i])) {\n          finished = true;\n          break;\n        }\n      }\n    }\n    // check dynamic route before processing fallback rewrites\n    if (!finished) {\n      resolvedHref = resolveHref(fsPathname);\n      matchedPage = pages.includes(resolvedHref);\n      finished = matchedPage;\n    }\n    if (!finished) {\n      for (var _i2 = 0; _i2 < rewrites.fallback.length; _i2++) {\n        if (handleRewrite(rewrites.fallback[_i2])) {\n          finished = true;\n          break;\n        }\n      }\n    }\n  }\n  return {\n    asPath: asPath,\n    parsedAs: parsedAs,\n    matchedPage: matchedPage,\n    resolvedHref: resolvedHref,\n    externalDest: externalDest\n  };\n}","map":{"version":3,"sources":["../../../../../shared/lib/router/utils/resolve-rewrites.ts"],"names":["resolveRewrites","asPath","pages","rewrites","query","resolveHref","locales","matchedPage","externalDest","parsedAs","parseRelativeUrl","fsPathname","removeTrailingSlash","normalizeLocalePath","removeBasePath","pathname","resolvedHref","handleRewrite","rewrite","matcher","getPathMatch","source","process","env","__NEXT_TRAILING_SLASH","removeUnnamedParams","strict","params","has","hasParams","matchHas","headers","host","document","location","hostname","cookies","cookie","split","reduce","acc","item","key","value","join","Object","assign","destination","destRes","prepareDestination","appendParamsToQuery","parsedDestination","newUrl","includes","finished","i","beforeFiles","length","afterFiles","fallback"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = resolveRewrites;\nvar _pathMatch = require(\"./path-match\");\nvar _prepareDestination = require(\"./prepare-destination\");\nvar _removeTrailingSlash = require(\"./remove-trailing-slash\");\nvar _normalizeLocalePath = require(\"../../i18n/normalize-locale-path\");\nvar _removeBasePath = require(\"../../../../client/remove-base-path\");\nvar _parseRelativeUrl = require(\"./parse-relative-url\");\nfunction resolveRewrites(asPath, pages, rewrites, query, resolveHref, locales) {\n    let matchedPage = false;\n    let externalDest = false;\n    let parsedAs = (0, _parseRelativeUrl).parseRelativeUrl(asPath);\n    let fsPathname = (0, _removeTrailingSlash).removeTrailingSlash((0, _normalizeLocalePath).normalizeLocalePath((0, _removeBasePath).removeBasePath(parsedAs.pathname), locales).pathname);\n    let resolvedHref;\n    const handleRewrite = (rewrite)=>{\n        const matcher = (0, _pathMatch).getPathMatch(rewrite.source + (process.env.__NEXT_TRAILING_SLASH ? '(/)?' : ''), {\n            removeUnnamedParams: true,\n            strict: true\n        });\n        let params = matcher(parsedAs.pathname);\n        if (rewrite.has && params) {\n            const hasParams = (0, _prepareDestination).matchHas({\n                headers: {\n                    host: document.location.hostname\n                },\n                cookies: document.cookie.split('; ').reduce((acc, item)=>{\n                    const [key, ...value] = item.split('=');\n                    acc[key] = value.join('=');\n                    return acc;\n                }, {})\n            }, rewrite.has, parsedAs.query);\n            if (hasParams) {\n                Object.assign(params, hasParams);\n            } else {\n                params = false;\n            }\n        }\n        if (params) {\n            if (!rewrite.destination) {\n                // this is a proxied rewrite which isn't handled on the client\n                externalDest = true;\n                return true;\n            }\n            const destRes = (0, _prepareDestination).prepareDestination({\n                appendParamsToQuery: true,\n                destination: rewrite.destination,\n                params: params,\n                query: query\n            });\n            parsedAs = destRes.parsedDestination;\n            asPath = destRes.newUrl;\n            Object.assign(query, destRes.parsedDestination.query);\n            fsPathname = (0, _removeTrailingSlash).removeTrailingSlash((0, _normalizeLocalePath).normalizeLocalePath((0, _removeBasePath).removeBasePath(asPath), locales).pathname);\n            if (pages.includes(fsPathname)) {\n                // check if we now match a page as this means we are done\n                // resolving the rewrites\n                matchedPage = true;\n                resolvedHref = fsPathname;\n                return true;\n            }\n            // check if we match a dynamic-route, if so we break the rewrites chain\n            resolvedHref = resolveHref(fsPathname);\n            if (resolvedHref !== asPath && pages.includes(resolvedHref)) {\n                matchedPage = true;\n                return true;\n            }\n        }\n    };\n    let finished = false;\n    for(let i = 0; i < rewrites.beforeFiles.length; i++){\n        // we don't end after match in beforeFiles to allow\n        // continuing through all beforeFiles rewrites\n        handleRewrite(rewrites.beforeFiles[i]);\n    }\n    matchedPage = pages.includes(fsPathname);\n    if (!matchedPage) {\n        if (!finished) {\n            for(let i = 0; i < rewrites.afterFiles.length; i++){\n                if (handleRewrite(rewrites.afterFiles[i])) {\n                    finished = true;\n                    break;\n                }\n            }\n        }\n        // check dynamic route before processing fallback rewrites\n        if (!finished) {\n            resolvedHref = resolveHref(fsPathname);\n            matchedPage = pages.includes(resolvedHref);\n            finished = matchedPage;\n        }\n        if (!finished) {\n            for(let i = 0; i < rewrites.fallback.length; i++){\n                if (handleRewrite(rewrites.fallback[i])) {\n                    finished = true;\n                    break;\n                }\n            }\n        }\n    }\n    return {\n        asPath,\n        parsedAs,\n        matchedPage,\n        resolvedHref,\n        externalDest\n    };\n}\n\n//# sourceMappingURL=resolve-rewrites.js.map"]},"metadata":{},"sourceType":"script"}